/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiImageDelete } from '../fn/image/api-image-delete';
import { ApiImageDelete$Params } from '../fn/image/api-image-delete';
import { apiImageIdGet } from '../fn/image/api-image-id-get';
import { ApiImageIdGet$Params } from '../fn/image/api-image-id-get';
import { apiImagePost$Json } from '../fn/image/api-image-post-json';
import { ApiImagePost$Json$Params } from '../fn/image/api-image-post-json';
import { apiImagePost$Plain } from '../fn/image/api-image-post-plain';
import { ApiImagePost$Plain$Params } from '../fn/image/api-image-post-plain';
import { ImageModel } from '../models/image-model';

@Injectable({ providedIn: 'root' })
export class ImageService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiImagePost()` */
  static readonly ApiImagePostPath = '/api/Image';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiImagePost$Plain()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiImagePost$Plain$Response(params?: ApiImagePost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ImageModel>> {
    return apiImagePost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiImagePost$Plain$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiImagePost$Plain(params?: ApiImagePost$Plain$Params, context?: HttpContext): Observable<ImageModel> {
    return this.apiImagePost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ImageModel>): ImageModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiImagePost$Json()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiImagePost$Json$Response(params?: ApiImagePost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ImageModel>> {
    return apiImagePost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiImagePost$Json$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiImagePost$Json(params?: ApiImagePost$Json$Params, context?: HttpContext): Observable<ImageModel> {
    return this.apiImagePost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ImageModel>): ImageModel => r.body)
    );
  }

  /** Path part for operation `apiImageDelete()` */
  static readonly ApiImageDeletePath = '/api/Image';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiImageDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiImageDelete$Response(params?: ApiImageDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiImageDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiImageDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiImageDelete(params?: ApiImageDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiImageDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiImageIdGet()` */
  static readonly ApiImageIdGetPath = '/api/Image/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiImageIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiImageIdGet$Response(params: ApiImageIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiImageIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiImageIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiImageIdGet(params: ApiImageIdGet$Params, context?: HttpContext): Observable<void> {
    return this.apiImageIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
