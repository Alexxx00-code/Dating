// <auto-generated />
using System;
using Dating.Infrastructure.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Dating.Infrastructure.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    partial class DataBaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Dating.Domain.Models.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Dating.Domain.Models.EyesColor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EyesColors");
                });

            modelBuilder.Entity("Dating.Domain.Models.Gender", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("Dating.Domain.Models.HairColor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("HairColors");
                });

            modelBuilder.Entity("Dating.Domain.Models.Relationship", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("FirstUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("MutualDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("OnesidedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("RefusedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("SecondUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FirstUserId");

                    b.HasIndex("SecondUserId");

                    b.ToTable("Relationships");
                });

            modelBuilder.Entity("Dating.Domain.Models.SexOrientation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SexOrientations");
                });

            modelBuilder.Entity("Dating.Domain.Models.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Dating.Domain.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BaseImageName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ColorEyesId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("EyesColorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("GenderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("HairColorId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Height")
                        .HasColumnType("integer");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<int?>("MaxPartnerHeight")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxPartnerWeight")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxPartnerYear")
                        .HasColumnType("integer");

                    b.Property<int?>("MinPartnerHeight")
                        .HasColumnType("integer");

                    b.Property<int?>("MinPartnerWeight")
                        .HasColumnType("integer");

                    b.Property<int?>("MinPartnerYear")
                        .HasColumnType("integer");

                    b.Property<long>("SexOrientationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<long>("TelegramId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("EyesColorId");

                    b.HasIndex("GenderId");

                    b.HasIndex("HairColorId");

                    b.HasIndex("SexOrientationId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Dating.Domain.Models.UserImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Dating.Domain.Models.ZodiacSign", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ZodiacSigns");
                });

            modelBuilder.Entity("UserPartnerCity", b =>
                {
                    b.Property<long>("PartnerCityId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("PartnerCityId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPartnerCity");
                });

            modelBuilder.Entity("UserPartnerEyesColor", b =>
                {
                    b.Property<long>("PartnerEyesColorId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("PartnerEyesColorId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPartnerEyesColor");
                });

            modelBuilder.Entity("UserPartnerHairColor", b =>
                {
                    b.Property<long>("PartnerHairColorId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("PartnerHairColorId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPartnerHairColor");
                });

            modelBuilder.Entity("UserPartnerZodiacSign", b =>
                {
                    b.Property<long>("PartnerZodiacSignId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("PartnerZodiacSignId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPartnerZodiacSign");
                });

            modelBuilder.Entity("UserTag", b =>
                {
                    b.Property<long>("TagId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("TagId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTag");
                });

            modelBuilder.Entity("Dating.Domain.Models.Relationship", b =>
                {
                    b.HasOne("Dating.Domain.Models.User", "FirstUser")
                        .WithMany("AsInitiatorRelationships")
                        .HasForeignKey("FirstUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dating.Domain.Models.User", "SecondUser")
                        .WithMany("AsResponderRelationships")
                        .HasForeignKey("SecondUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FirstUser");

                    b.Navigation("SecondUser");
                });

            modelBuilder.Entity("Dating.Domain.Models.User", b =>
                {
                    b.HasOne("Dating.Domain.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dating.Domain.Models.EyesColor", "EyesColor")
                        .WithMany()
                        .HasForeignKey("EyesColorId");

                    b.HasOne("Dating.Domain.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dating.Domain.Models.HairColor", "HairColor")
                        .WithMany()
                        .HasForeignKey("HairColorId");

                    b.HasOne("Dating.Domain.Models.SexOrientation", "SexOrientation")
                        .WithMany()
                        .HasForeignKey("SexOrientationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("EyesColor");

                    b.Navigation("Gender");

                    b.Navigation("HairColor");

                    b.Navigation("SexOrientation");
                });

            modelBuilder.Entity("Dating.Domain.Models.UserImage", b =>
                {
                    b.HasOne("Dating.Domain.Models.User", null)
                        .WithMany("UserImages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserPartnerCity", b =>
                {
                    b.HasOne("Dating.Domain.Models.City", null)
                        .WithMany()
                        .HasForeignKey("PartnerCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dating.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserPartnerEyesColor", b =>
                {
                    b.HasOne("Dating.Domain.Models.EyesColor", null)
                        .WithMany()
                        .HasForeignKey("PartnerEyesColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dating.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserPartnerHairColor", b =>
                {
                    b.HasOne("Dating.Domain.Models.HairColor", null)
                        .WithMany()
                        .HasForeignKey("PartnerHairColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dating.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserPartnerZodiacSign", b =>
                {
                    b.HasOne("Dating.Domain.Models.ZodiacSign", null)
                        .WithMany()
                        .HasForeignKey("PartnerZodiacSignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dating.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserTag", b =>
                {
                    b.HasOne("Dating.Domain.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dating.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dating.Domain.Models.User", b =>
                {
                    b.Navigation("AsInitiatorRelationships");

                    b.Navigation("AsResponderRelationships");

                    b.Navigation("UserImages");
                });
#pragma warning restore 612, 618
        }
    }
}
